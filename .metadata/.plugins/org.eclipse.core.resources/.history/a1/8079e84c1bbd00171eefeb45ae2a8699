import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
public class Duy extends GameObject {

	Handler handler;
	Game game;
	private BufferedImage[] duy_image = new BufferedImage[3];
	Animation anim;
	
	public Duy(int x, int y, ID id, Handler handler, Game game, SpriteSheetLvl1 ss) {
		super(x, y, id, ss);
		this.handler = handler;
		this.game = game;
		
		duy_image[0] = ss.grabImage(1, 1, 32, 48);
		duy_image[1] = ss.grabImage(2, 1, 32, 48);
		duy_image[2] = ss.grabImage(3, 1, 32, 48);
		
		anim = new Animation(3, duy_image[0], duy_image[1], duy_image[2]);
	}

	public void tick() {
		x += velX;
		y += velY;
		
		collision();
		
		if(handler.isUp()) velY = -5;
		else if(!handler.isDown()) velY = 0;
		
		if(handler.isDown()) velY = 5;
		else if(!handler.isUp()) velY = 0;
		
		if(handler.isRight()) velX = 5;
		else if(!handler.isLeft()) velX = 0;
		
		if(handler.isLeft()) velX = -5;
		else if(!handler.isRight()) velX = 0;
		
		anim.runAnimation();
	}

	private void collision() {
		for(int i = 0; i < handler.object.size(); i++) {
			GameObject tempObject = handler.object.get(i);
			
			if(tempObject.getId() == ID.Berg) {
				if(getBounds().intersects(tempObject.getBounds())){
					x += velX * -1;
					y += velY * -1;
				}
				
			}
			
			if(tempObject.getId() == ID.DivineJuice) {
				if(getBounds().intersects(tempObject.getBounds())){
					//juice fully restores divinity
					game.divinity = 100;
					handler.removeObject(tempObject);
				}
			}
			
			if(tempObject.getId() == ID.PenguinA) {
				if(getBounds().intersects(tempObject.getBounds())){
					//subtract 50 health
					game.hp--;
					x += velX * -1;
					y += velY * -1;
				}	
			}
			
			if(tempObject.getId() == ID.Water) {
				if(getBounds().intersects(tempObject.getBounds())){
					//subtract 50 health
					game.hp = 0;
				}	
			}
			
			if(tempObject.getId() == ID.Advance) {
				if(getBounds().intersects(tempObject.getBounds())){
					//subtract 50 health
					game.complete = 1;
				}	
			}
			
			if(tempObject.getId() == ID.Coin) {
				if(getBounds().intersects(tempObject.getBounds())){
					//collect coin
					Game.coin++;
					game.coinTaken = true;
					handler.removeObject(tempObject);
				}
			}
		}
	}
	public void render(Graphics g) {
		if(velX == 0 && velY == 0) {
			g.drawImage(duy_image[0], x, y, null);
		}
		else {
			anim.drawAnimation(g, x, y, 0);
		}
	}

	public Rectangle getBounds() {
		return new Rectangle(x, y, 32, 48);
	}

}
