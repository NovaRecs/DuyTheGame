import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;

public class Game extends Canvas implements Runnable {
	private static final long serialVersionUID = 1L;

	private boolean isRunning = false;
	private Thread thread;
	private Handler handler;
	private Camera camera;
	private SpriteSheetLvl1 ss;
	
	private BufferedImage level = null;
	private BufferedImage sprite_sheet = null;
	private BufferedImage floor = null;
	
	public int divinity = 100;
	public static int hp = 100;
	public static int complete = 0;
	public static int coin = 0;
	
	public static void main(String[] args) {
		BackgroundMusic music = new BackgroundMusic("Background");
		music.start();
		new Game();
	}//main
	
	public Game() {
		new Window(1000, 563, "Duy The Game", this);
		start();
		
		handler = new Handler();
		camera = new Camera(0, 0);
		this.addKeyListener(new KeyInput (handler));
		
		BufferedImageLoader loader = new BufferedImageLoader();
		level = loader.loadImage("/level1A.png");
		sprite_sheet = loader.loadImage("/sprite_sheetlvl1.png");
		
		ss = new SpriteSheetLvl1(sprite_sheet);
		floor = ss.grabImage(4, 2, 32, 32);
		this.addMouseListener(new MouseInput(handler, camera, this, ss));
		loadLevel(level);
	}//constructor Game
	
	public void run() {
		this.requestFocus();
		long lastTime = System.nanoTime();
		double amountOfTicks = 60.0;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		long timer = System.currentTimeMillis();
		int frames = 0;
		while(isRunning) {
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime= now;
			while(delta >= 1) {
				tick();
				delta--;
			}//while
			render();
			frames++;
			if(System.currentTimeMillis() - timer > 1000) {
				timer += 1000;
				frames = 0;
			}//if
		}//while
		stop();
	}//run
	
	private void start() {
		isRunning = true;
		thread = new Thread(this);
		thread.start();
	}//start
	
	private void stop() {
		isRunning = false;
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}//try/catch
	}//stop
	
	public void tick() {
		for(int i = 0; i < handler.object.size(); i++) {
			if(handler.object.get(i).getId() == ID.Duy) {
				camera.tick(handler.object.get(i));
			}
		}
		if(hp <= 0) {
			
			handler.object.clear();
			hp = 100;
			divinity = 100;
			loadLevel(level);
		}
		handler.tick();
	}//tick
	
	public void render() {
		BufferStrategy bs = this.getBufferStrategy();
		if(bs == null) {
			this.createBufferStrategy(3);
			return;
		}//if
		Graphics g = bs.getDrawGraphics();
		Graphics2D g2d = (Graphics2D) g;
		g2d.translate(-camera.getX(), -camera.getY());
		for(int xx = 0; xx < 32 * 72; xx+=32) {
			for(int yy = 0; yy < 32 * 72; yy+=32) {
				g.drawImage(floor, xx, yy, null);
			}
		}
		//Draw Below////////////////////////////////
		handler.render(g);
		g2d.translate(camera.getX(), camera.getY());
		g.setColor(Color.gray);
		g.fillRect(5, 5, 200, 16);
		g.setColor(Color.red);
		g.fillRect(5, 5, hp*2, 16);
		g.setColor(Color.black);
		g.drawRect(5, 5, 200, 16);
		g.setColor(Color.white);
		g.drawString("HP: " + hp, 16, 16);
		
		g.setColor(Color.gray);
		g.fillRect(5, 50, 200, 32);
		g.setColor(Color.magenta);
		g.fillRect(5, 50, divinity*2, 32);
		g.setColor(Color.black);
		g.drawRect(5, 50, 200, 32);
		g.setColor(Color.white);
		g.drawString("Divinity: " + divinity, 10, 70);
		
		g.setColor(Color.gray);
		g.fillRect(5, 95, 200, 32);
		g.setColor(Color.black);
		g.drawRect(5, 95, 200, 32);
		g.setColor(Color.white);
		g.drawString("Complete: " + complete, 10, 115);
		g.setColor(Color.white);
		g.drawString("Coin: " + coin, 100, 115);
		
		//Draw Above////////////////////////////////
		g.dispose();
		bs.show();
	}//render
	
	//loading the level
	private void loadLevel(BufferedImage image) {
		int w = image.getWidth();
		int h = image.getHeight();
		for(int xx = 0; xx < w; xx++) {
			for(int yy = 0; yy < h; yy++) {
				int pixel = image.getRGB(xx, yy);
				int red = (pixel >> 16) & 0xff;
				int green = (pixel >> 8) & 0xff;
				int blue = (pixel) & 0xff;
				
				if(red == 255) 
					handler.addObject(new Berg(xx*32, yy*32, ID.Berg, ss));
				
				if(blue == 255 && green == 0)
					handler.addObject(new Duy(xx*32, yy*32, ID.Duy, handler, this, ss));		
				
				if(green == 255 && blue == 0)
					handler.addObject(new PenguinA(xx*32, yy*32, ID.PenguinA, handler, ss));
				
				if(green == 255 && blue == 255)
					handler.addObject(new DivineJuice(xx*32, yy*32, ID.DivineJuice, ss));
				
				if(green == 255 && red == 255 && blue == 0)
					handler.addObject(new Water(xx*32, yy*32, ID.Water, ss));
				
				if(green == 0 && red == 127 && blue == 55)
					handler.addObject(new Advance(xx*32, yy*32, ID.Advance, ss));
				
				if(green == 0 && red == 127 && blue == 0)
					handler.addObject(new Coin(xx*32, yy*32, ID.Coin, ss));
			}
		}
	}
}//Game
